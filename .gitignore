#Задача 1.

df <- diamonds
m1 <- mean(df$price)
m2 <- mean(df$carat)
df$factor_price <- ifelse (df$price >= m1,1,0)
df$factor_carat <- ifelse (df$carat >= m2,1,0)
main_stat <- chisq.test(df$factor_price,df$factor_carat)
main_stat <- main_stat$statistic

#Задача 2. Сохранение p value для точного критерия фишера.
df <- mtcars
main_stat<- fisher.test(df$am,df$vs)
fisher_test <- main_stat$p.value

#Задача 3.Т-тест длинны зубов у Свинок по двум выборкам с параметрами
# VC и 2, OJ и 0.5

df <- ToothGrowth
df1 <- subset (ToothGrowth, supp == "VC" & dose == "2") 
df2 <- subset (ToothGrowth, supp == 'OJ' & dose == '0.5')
a <- t.test(df1$len,df2$len)
t_stat <- a$statistic


#Задача 4.
df <- lekarstva
a <- t.test(df$Pressure_before,df$Pressure_after,paired = T)
a
#Задача 5. # В этом задании нужно проверить гипотезу о равенстве средних двух выборок
df <- read.table("dataset_11504_15.txt")
bartlett.test(V1 ~ V2, df)
t.test(V1 ~ V2, df, var.equal = T)
wilcox.test(df$V1, df$V2)

#Задача 6,7 Дисперсионный анализ.
df <- npk
fit1 <- aov(yield~ (N + P + K)^2, data=df)
summary(fit1)

#Задача 8. Дисперсионный анализ + визуализация (бокс-плот)
df <-  iris
ggplot(df, aes(x = Sepal.Length, y = Species)) + 
  geom_boxplot()
boxplot(Sepal.Length ~ Species, data=df)
fit <- aov(Sepal.Length ~ Species, data=df)
summary(fit)

#Задача 9. Дисперсионный анализ + влияние внутригрупповой переменной на температуру
a <- read.csv('Pillulkin.csv')
a$patient <- as.factor(a$patient)
fit3 <- aov(temperature ~ pill + Error(patient/temperature), data = a)
summary(fit3)

#Задча 10.
a <- read.csv('Pillulkin.csv')
a$patient <- as.factor(a$patient)
fit3 <- aov(temperature ~ pill*doctor + Error(patient/(pill*doctor)), data = a)
summary(fit3)

#Задача 11. Дописывание кода для графика.
library(ggplot2)
obj <- ggplot(ToothGrowth, aes(x = as.factor(dose), y = len, col = supp,group=supp))+
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0.1, position = position_dodge(0.2))+
  stat_summary(fun.data = mean_cl_boot, geom = 'point', size = 3, position = position_dodge(0.2))+
  stat_summary(fun.data = mean_cl_boot, geom = 'line', position = position_dodge(0.2))
print (obj)
install.packages("Hmisc")


#Задача 12.
NA.position <- function(x){
  which(is.na(x)) 
}


#Задача 13.
#Вариант 1. Говнокод.
x <- c(1:100,NA,NA,1:200)
NA.counter <- function(x){
  c <- na.omit(x)
  b <- which.max(which(c%in%c))
  g <- which.max(which(x%in%x))
  return(g-b)
}
#Вариант 2. Менее говнокод.
NA.counter <- function(x){return(length(x)-length(na.omit(x)))}
NA.counter(x)
#Вариант 3. Идеал.
NA.counter <- function(x){    
  return(sum(is.na(x)))}


# Задача 14.


  #говнокод
  filtered.sum <- function(x){
    x <- na.omit(x)
    i<-1
    for (i in 1:length(x)){
      ifelse (x[i]<0,x[i]<-0,x)
      i<-i+1
    }
  x<-  sum(x)
  x
  }
  
  #норм решение
  filtered.sum <- function(x){    
    return(sum(x[x > 0], na.rm = T))}

#Задача 15. Удаление выбросов, отклоняющихся от 1 или 3 квартиля на 1.5 межквартильных размаха.
quantile(x, probs = c(0.25, 0.75)) # 1 и 3 квартиль для вектора x
IQR(x) #межквартильный размах

  outliers.rm <- function(x){
    c <- quantile(x, probs = c(0.25, 0.75))
    x<- x[x>=(c[1]-1.5*IQR(x)) & x<=(c[2]+1.5*IQR(x))]
  }
  

 


